function escapeHtml(text) {
    var map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };

    return text.replace(/[&<>"']/g, function (m) {
        return map[m];
    });
}

function ajax(method, url, data, callback) {
    data['_token'] = $('[name="_token"]').attr('content');
    $.ajax({
        type: method,
        url: url,
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify(data),
        headers: {"token": getCookie("Authorization")},
        success: function (res) {
            callback(res);
        }, error: function (err) {
            if (err.status == 401 && url != '/agent/login')
                window.location = '/logout?r=relogin';
            if ((err.responseJSON).constructor == Object)
                Object.keys(err.responseJSON).length || (err.responseJSON = {'error': err.statusText});
            else if ((err.responseJSON).constructor == Array)
                err.responseJSON.length || (err.responseJSON = {'error': err.statusText});
            callback(err.responseJSON);
        },
        statusCode: {
            403: function(xhr) {
                document.cookie = "Authorization=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
                var url = window.location.href;
                if (url.includes('admin') || url.includes('candidate'))
                {
                    $.growl.error({message: '連線逾時，請重新登入'});
                    setTimeout(() => {
                        // window.location.href = '/';
                    }, 1500);
                }
            },
            407: function(xhr) {
                $.growl.error({message: '未授權此頁面'});
                setTimeout(() => {
                    window.location.href = '/';
                }, 1500);
            }
        }
    });
}

function isEmail(email) {
    var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    return regex.test(email);
}

function is_manage(permission) {
    var manage = false;
    for (var i in permission)
        if (inArray(['account', 'device', 'group', 'import', 'license', 'remote', 'server', 'tool', 'video', 'fr', 'analyze'], i) && permission[i]) {
            manage = true;
            break;
        }
    return manage;
}

function removeValue(arr) {
    var what, a = arguments, L = a.length, ax;
    while (L > 1 && arr.length) {
        what = a[--L];
        while ((ax = arr.indexOf(what)) !== -1) {
            arr.splice(ax, 1);
        }
    }
    return arr;
}

function formatBytes(bytes, decimals, k) {
    decimals || (decimals = 0);
    k || (k = 1000);
    if (bytes == 0) return '0 Byte';
    var dm = decimals + 1 || 3;
    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    var i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

function formatSceond(second) { // dd:hh:mm
    second || (second = 0);
    var dd = Math.floor(second / 3600 / 24);
    var hh = Math.floor((second - (dd * 3600 * 24)) / 3600);
    var mm = Math.floor((second - (dd * 3600 * 24) - (hh * 3600)) / 60);
    if (dd < 10) dd = "0" + dd;
    if (hh < 10) hh = "0" + hh;
    if (mm < 10) mm = "0" + mm;
    return dd + langDict['days'] + hh + langDict['hours'] + mm + langDict['minutes'];
}

function data_format(url, port, method, body, timeout, argv) {
    port || (port = 0);
    method || (method = 'GET');
    body || (body = {});
    timeout || (timeout = 15);
    argv || (argv = null);
    var data = {
        'url': url,
        'port': port,
        'method': method,
        'payload': {},
        'timeout': timeout,
        'argv': argv
    };
    for (var i in body) data['payload'][i] = body[i];
    return data;
}

function date_format(string) {
    return moment(new Date(string)).format('YYYY.MM.DD');
}

function date_range_init(start, end) {
    reportrange(start, end);
    var pickerLang = get_daterangepicker_lang(lang);
    $('.date-range-picker').daterangepicker({
        bsVersion: '4.x',
        startDate: start,
        endDate: end,
        ranges: pickerLang.ranges,
        timePicker: true,
        timePickerIncrement: 1,
        locale: pickerLang.locale,
    }, reportrange);

    function reportrange(start, end) {
        $('.date-range-picker span').html(start.format('YYYY-MM-DD') + '&nbsp;~&nbsp;' + end.format('YYYY-MM-DD'));
    }
}

function get_mini_daterangepicker_lang(lang) {
    switch (lang) {
        case 'zh':
            return {
                format: 'YYYY.MM.DD',
                applyLabel: '確認',
                cancelLabel: '取消',
                daysOfWeek: ["日", "一", "二", "三", "四", "五", "六"],
                monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"]
            };
            break;
        default:
            return {format: 'YYYY-MM-DD h:mm A'};
            break;
    }
}

function get_log_daterangepicker_lang(lang) {
    switch (lang) {
        case 'zh':
            return {
                'ranges': {
                    '今天': [moment().set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    '昨天': [moment().subtract(1, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'days').set({hour: 24, minute: 0})],
                    '過去七天': [moment().subtract(6, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()]
                }, 'locale': {
                    format: 'YYYY-MM-DD h:mm A',
                    applyLabel: '確認',
                    cancelLabel: '取消',
                    daysOfWeek: ["日", "一", "二", "三", "四", "五", "六"],
                    monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                    customRangeLabel: '客製化時間',
                }
            };
        default:
            return {
                'ranges': {
                    'Today': [moment().set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    'Yesterday': [moment().subtract(1, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'days').set({hour: 24, minute: 0})],
                    'Last 7 Days': [moment().subtract(6, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()]
                }, 'locale': {
                    format: 'YYYY-MM-DD h:mm A'
                }
            };
            break;
    }
}

function get_daterangepicker_lang(lang) {
    switch (lang) {
        case 'zh':
            return {
                'ranges': {
                    '今天': [moment().set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    '昨天': [moment().subtract(1, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'days').set({hour: 24, minute: 0})],
                    '過去七天': [moment().subtract(6, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    '過去30天': [moment().subtract(29, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    '本月': [moment().startOf('month').set({
                        hour: 0,
                        minute: 0
                    }), moment().endOf('month')],
                    '過去一個月': [moment().subtract(1, 'month').startOf('month').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'month').endOf('month')]
                }, 'locale': {
                    format: 'YYYY-MM-DD h:mm A',
                    applyLabel: '確認',
                    cancelLabel: '取消',
                    daysOfWeek: ["日", "一", "二", "三", "四", "五", "六"],
                    monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                    customRangeLabel: '客製化時間',
                }
            };
        default:
            return {
                'ranges': {
                    'Today': [moment().set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    'Yesterday': [moment().subtract(1, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'days').set({hour: 24, minute: 0})],
                    'Last 7 Days': [moment().subtract(6, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    'This Month': [moment().startOf('month').set({
                        hour: 0,
                        minute: 0
                    }), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'month').endOf('month')]
                }, 'locale': {
                    format: 'YYYY-MM-DD h:mm A'
                }
            };
            break;
    }
}

function capitalizeFirstLetter(str) {
    var res = 'Unknown';
    typeof str == 'string' && (res = str.charAt(0).toUpperCase() + str.slice(1));
    return res;
}

function loading(state) {
    state ? ($('.main-page').hide(), $('.loading-container').show()) : ($('.main-page').show(), $('.loading-container').hide());
}

function inArray(arr, val) {
    var exist = false;
    for (var i in arr) if (arr[i] == val) {
        exist = true;
        break;
    }
    return exist;
}

function isChrome() {
    //return /chrome/.test(navigator.userAgent.toLowerCase());
    return true; //todo: wait vxg_cloud_player release stable version
}

function isMobile() {
    if (navigator.userAgent.match(/Android/i)
        || navigator.userAgent.match(/webOS/i)
        || navigator.userAgent.match(/iPhone/i)
        || navigator.userAgent.match(/iPad/i)
        || navigator.userAgent.match(/iPod/i)
        || navigator.userAgent.match(/BlackBerry/i)
        || navigator.userAgent.match(/Windows Phone/i)
    ) return true;
    else
        return false;
}

function uuid() {
    var d = Date.now();
    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
        d += performance.now(); //use high-precision timer if available
    }
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    });
}

function guid() {
    var s4 = function () {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    localStorage.setItem('uuid', s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4());
}

function getByteLen(normal_val) {
    normal_val = String(normal_val);
    var byteLen = 0;
    for (var i = 0; i < normal_val.length; i++) {
        var c = normal_val.charCodeAt(i);
        byteLen += c < (1 << 7) ? 1 :
            c < (1 << 11) ? 2 :
                c < (1 << 16) ? 3 :
                    c < (1 << 21) ? 4 :
                        c < (1 << 26) ? 5 :
                            c < (1 << 31) ? 6 : Number.NaN;
    }
    return byteLen;
}

function getRandomColor() {
    var letters = '0123456789ABCDEF';
    var color = '#';
    for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

function switch_initial(sw, state) {
    sw.bootstrapSwitch('destroy');
    sw.prop('checked', state);
    sw.bootstrapSwitch();
}

function inputState(id, flag) {
    var form = $('#' + id).parent(), icon = form.find('span');
    switch (flag) {
        case 0: // ok
            form.removeClass('has-warning has-error').addClass('has-success');
            icon.removeClass('fa-exclamation fa-times').addClass('fa-check');
            break;
        case 1: // error
            form.removeClass('has-success has-warning').addClass('has-error');
            icon.removeClass('fa-exclamation fa-check').addClass('fa-times');
            break;
        default: // warn
            form.removeClass('has-success has-error').addClass('has-warning');
            icon.removeClass('fa-check fa-times').addClass('fa-exclamation');
            break;
    }

}

function getCookie(cname) {
    let name = cname + "=";
    let decodedCookie = decodeURIComponent(document.cookie);
    let ca = decodedCookie.split(';');
    for(let i = 0; i <ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  }

function check_token() { 
    var url = window.location.href;
    {
        {
            ajax('POST', '/api/admin/ct', {'token': getCookie('Authorization')}, function(a){
                if(a.success)
                {
                    $('.nav-auth').css('display', 'none');
                    $('#nav_login').css('display', 'none');
                    $('#nav_logout').css('display', 'inline');
                    if (a.auth == '7')
                        $('#nav_admin').css('display', 'inline');
                    else if (a.auth == '1')
                        $('#nav_candidates').css('display', 'inline');
                    return (true);
                }
            });
        }
    }
  }

$(document).ready(function () {

    check_token();
    //selectpicker language
    // (function ($) {
    //     $.fn.selectpicker.defaults = {
    //         noneSelectedText: '沒有選取任何項目',
    //         noneResultsText: '沒有找到符合的結果',
    //         countSelectedText: '已經選取{0}個項目',
    //         maxOptionsText: ['超過限制 (最多選擇{n}項)', '超過限制(最多選擇{n}組)'],
    //         selectAllText: '選取全部',
    //         deselectAllText: '全部取消',
    //         multipleSeparator: ' ',
    //         showSubtext: true
    //     };
    // })(jQuery);

    // button loadding, because remove from bs4 :(
    (function ($) {
        $.fn.button = function (action) {
            if (action === 'loading' && this.data('loading-text')) {
                this.data('original-text', this.html()).html(this.data('loading-text')).prop('disabled', true);
            }
            if (action === 'reset' && this.data('original-text')) {
                this.html(this.data('original-text')).prop('disabled', false);
            }
        };
    }(jQuery));
    // not display at app web view
    navigator.userAgent.indexOf('bovia_app_webview') !== -1 && $('nav[class*=navbar]').hide();
    $('.change-site').on('click', function (e) {
        var id = $(this).attr('data-id');
        id != $('[name="_site"]').attr('content') && ajax('PUT', '/agent/cross-site', data_format('', 0, 'GET', {'id': id}, null), function (a) {
            if (a.error) $.growl.error({message: a.error}); else location.reload();
        });
    });

    // user card password visible
    $('.edit-password-view').on('click', function (e) {
        var icon = $(this).find('i'), input = $(this).closest('.input-group').find('input');
        if (icon.hasClass('fa-eye')) {
            icon.removeClass('fa-eye').addClass('fa-eye-slash');
            input.attr('type', 'text');
        } else {
            icon.removeClass('fa-eye-slash').addClass('fa-eye');
            input.attr('type', 'password');
        }
    });

    //validation
    $('.numeric').on('keypress keyup blur', function (event) {
        $(this).val($(this).val().replace(/[^\d:].+/, ""));
        (event.which < 48 || event.which > 58) && event.preventDefault();
    });
    $('.float').on('keypress keyup blur', function (event) {
        $(this).val($(this).val().replace(/[^\d.:].+/, ""));
        event.which == 46 || (event.which < 48 || event.which > 58) && event.preventDefault();
    });

});